#!/bin/bash

# [[]] vs []
# https://stackoverflow.com/a/47576482

# why quote "${arr[@]}"?
# first comment of https://stackoverflow.com/a/8880633

# bash directory stack
# https://www.gnu.org/software/bash/manual/html_node/Directory-Stack-Builtins.html

# ==============================================================
# ===================== script configure =======================
# ==============================================================

# TODO automatically install vim-plug - plugins?
# TODO implement terminal-version notify-send
# TODO use package manager to resolve dependencies
# TODO add version & help messages


# pipe fail as a whole if any of subproc fails
# useful for checking failure of `curl <URL> | sh` installs
set -o pipefail

system=unknown

if [ -f "/etc/debian_version" ]; then
  system=debian
fi

profile=$1
silent=$2

# setting for default profile
# should be topologically ordered on dependency, the later, the more dependent
package_candidate=(make build-essential ipython inotify-tools rustup stack '-')
# packages installed in reverse order
package_install=(python3-pip python3 tmux vim-plug vim tldr clf hc ascii curl upgrade)

case "$profile" in
  "minimal")
    package_candidate=(make build-essential inotify-tools hc ascii clf vim-plug tmux python3 rustup stack '-')
    package_install=(vim tldr curl upgrade)
    ;;
  "nonroot")
    package_candidate=(make build-essential tmux python3 rustup stack '-')
    package_install=(vim-plug tldr clf hc ascii inotify-tools-nonroot)
    ;;
  "") ;; # use default
  *) echo unkown profile "$1", loading default...
esac

# ==============================================================
# ===================== querying ===============================
# ==============================================================

# coloring done with help from https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
while [ ${#package_candidate[@]} -ne 1 ]; do

  if [ $package_candidate == '-' ]; then
    # package_condiate.pop_front()
    package_candidate=("${package_candidate[@]:1}")
    # package_candidate.push_back('-')
    package_candidate+=('-')
  fi

  # package = package_condiate.pop_front()
  package="${package_candidate[0]}"
  package_candidate=("${package_candidate[@]:1}")

  cand_num=${#package_candidate[@]}
  echo -en "\x1b[2K" # erase the entire line
  echo -ne "packages to be installed |\x1b[32m"
  for pack in "${package_install[@]}"; do
    echo -n " $pack"
  done
  echo -e "\x1b[0m"

  echo -e "\x1b[2K" # erase the entire line
  echo -en " installation candidates |\x1b[31m $package"
  for (( i = 0 ; i < $cand_num ; i++ )) ; do # FIXME forces bash
    pack="${package_candidate[$i]}"
    if [ "$pack" == "-" ]; then
      if [ $i == $(($cand_num-1)) ]; then
        continue
      else
        echo -ne "\x1b[33m !\x1b[31m"
      fi
    else
      echo -n " $pack"
    fi
  done
  echo -en "\x1b[0m"

  echo -e "\x1b[2A" # move cursor up 2 lines
  echo -en "\x1b[2K" # erase the entire line
  echo -ne "  do you want to install \x1b[34m$package\x1b[0m? (Ynqader?) "
  read -e ans

  if [ "$ans" == Y ] || [ "$ans" == y ]; then
    # package_install.push_front(package)
    package_install=("$package" "${package_install[@]}")
  elif [ "$ans" == N ] || [ "$ans" == n ]; then
    # package_candidate.push_back(package)
    package_candidate+=("$package")
  elif [ "$ans" == Q ] || [ "$ans" == q ]; then
    # package_candidate.extend(package_install.drain())
    package_candidate+=("${package_install[@]}")
    package_install=()
    break
  elif [ "$ans" == A ] || [ "$ans" == a ]; then
    # package_install.push_front(package)
    package_install=("$package" "${package_install[@]}")
    # package_install.push_front(package_candidate.drain_until('-'))
    for pack in "${package_candidate[@]}"; do
      if [ "$pack" == '-' ]; then break; fi
      package_install=("$pack" "${package_install[@]}")
    done
    package_candidate=("${package_candidate[@]:$i}")
    break
  elif [ "$ans" == D ] || [ "$ans" == d ]; then
    break
  elif [ "$ans" == E ] || [ "$ans" == e ]; then
    echo -en "\x1b[1A\x1b[2K" # replace orig prompt
    read -p "  packages to install: " -a package_additional
    # package_install.extend_front(package_additional.drain())
    package_install=("${package_additional[@]}" "${package_install[@]}")
    package_additional=()
    # package_candidate.push_front(pakcage)
    package_candidate=("$package" "${package_candidate[@]}")
  elif [ "$ans" == R ] || [ "$ans" == r ]; then
    # package_candidate.push_front(package)
    package_candidate=("$package" "${package_candidate[@]}")
    # if package_install.len() > 0
    if [ ${#package_install[@]} -gt 0 ]; then
      # package_candidate.push_front(package_install.pop_front())
      package_candidate=("${package_install[0]}" "${package_candidate[@]}")
      package_install=("${package_install[@]:1}")
    fi
  else
    # package_candidate.push_front(pakcage)
    package_candidate=("$package" "${package_candidate[@]}")
    echo "" # move cursor 1 line down
    echo -en "\x1b[35m"
    echo "y - install selected package"
    echo "n - do not install selected package"
    echo "q - quit; do not install anything"
    echo "a - install this and any later packages till '!'"
    echo "d - do not install this or any of the remaining packages"
    echo "e - manually add package name"
    echo "r - revert last acepttance"
    echo "? - print help"
    echo "\n\n"
    echo -en "\x1b[0m"
  fi

  echo -en "\x1b[2A" # move up 2 lines
done

echo "" # move down 1 line

# ==============================================================
# ================== installation configure ====================
# ==============================================================

# package-system specific install methods, highest precedence
# ===========================================================

# package specific install methods, mid precedence
# ====================================================

install_package_ipython() {
  # TODO
  [ -n "$silent" ] && op="-s" || op=""
  pip install ipython
}

# depends on curl
install_package_vim-plug() {
  [ -n "$silent" ] && op="-s" || op=""
  curl $op -fLo ~/.vim/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

# depends on curl
install_package_rustup() {
  [ -n "$silent" ] && op="-s" || op=""
  curl $op --proto '=https' --tlsv1.2 -Sf https://sh.rustup.rs | sh -s -- -y -q
}

# depends on wget
install_package_stack() {
  [ -n "$silent" ] && op="-q" || op=""
  wget $op -Ol https://get.haskellstack.org/ | sh -s -- $op -f # quietly overwrite binary
  if [ $? -ne 0 ]; then
    [ -n "$silent" ] && op2="-s" || op2=""
    echo stack install using wget failed. trying using curl...
    curl $op2 -SL https://get.haskellstack.org/ | sh -s -- $op -f # quietly overwrite binary
  fi
}

# depends on curl
# FIXME tldr has runtime dependency on unzip
install_package_tldr() {
  [ -n "$silent" ] && op="-s" || op=""
  curl $op -o ~/.local/bin/tldr https://raw.githubusercontent.com/raylee/tldr-sh-client/master/tldr && \
  chmod +x ~/.local/bin/tldr
}

# depends on curl
install_package_clf() {
  [ -n "$silent" ] && op="-q" || op=""
  pip install $op --user clf
  # TODO option to install globally?
}

# depends on tar, make, curl
install_package_ascii() {
  [ -n "$silent" ] && op="-s" || op=""
  curl $op -O http://www.catb.org/~esr/ascii/ascii-3.18.tar.gz && \
  tar xzf ascii-3.18.tar.gz && \
  cd ascii-3.18 && \
  make $op && \
  mv ascii ~/.local/bin && \
  cd .. && \
  rm -rf ascii-3.18 ascii-3.18.tar.gz
}

# depends on curl or rustup
install_package_hc() {
  if [ "`uname -ms`" != 'Linux x86_64' ]; then
    [ -n "$silent" ] && op="-s" || op=""
    curl $op -o \
      ~/hc https://github.com/bivoje/hex-calculator/releases/download/rel-1.0.0/hc-linux_x86_64-1.0.0 && \
    chmod +x ~/hc
  else
    [ -n "$silent" ] && op="-q" || op=""
    cargo install $op --git https://github.com/bivoje/hex-calculator.git
  fi
}

# depends on build-essentials & autotools-dev, automake
install_package_inotify-tools-nonroot() {
  git clone https://github.com/inotify-tools/inotify-tools.git
  cd inotify-tools
  mkdir target
  ./autogen.sh
  ./configure --prefix=`pwd`/target
  make
  make install
  mv target/bin/* $HOME/.local/bin
  mkdir -p $HOME/lib
  mv lib/* $HOME/lib
}

# system specific install methods, lowest precedence
# ==================================================

install_debian_upgrade() {
  [ -n "$silent" ] && op="-qq" || op=""
  apt-get upgrade -y $op
}

install_system() {
  if [ -z "$1" ]; then
    # initialize if called without an argument
    echo -e "\x1b[33m:: SETUP: Initializing...\x1b[0m"
    case "$system" in
      debian)
        [ -n "$silent" ] && op="-qq" || op=""
        apt-get $op update
        ;;
      *) # does nothing by default
    esac
    echo -e "\x1b[33m:: SETUP: Done! \x1b[0m"
    return
  fi

  case "$system" in
    debian)
      [ -n "$silent" ] && op="-qq" || op=""
      apt-get $op install -y $1
      ;;
    alpine)
      apk add $1
      ;;
    *) "no default install method specified for system $system"; false
  esac
}

# ==============================================================
# ===================== effective code =========================
# ==============================================================

install() {
  # https://stackoverflow.com/a/9529981
  if declare -F install_${system}_$1 > /dev/null; then
    install_${system}_$1
  elif declare -F install_package_$1 > /dev/null; then
    install_package_$1
  else
    install_system "$1"
  fi
}

run() {
  package_failed=()
  package_success=()

  if [ ${#package_install[@]} -eq 0 ]; then
    echo nothing to install
    exit
  fi

  install_system # initialize package manager

  # FIXME forces bash
  for (( i = ${#package_install[@]}-1 ; 0 <= i ; i-- )) ; do
    pack="${package_install[$i]}"
    echo -e "\x1b[33m:: SETUP: try installing $pack \x1b[0m"
    install "$pack"
    if [ $? -eq 0 ]; then
      package_success+=("$pack")
      echo -e "\x1b[33m:: SETUP: $pack installed \x1b[0m"
    else
      package_failed+=("$pack")
      echo -e "\x1b[33m:: SETUP: $pack failed install \x1b[0m"
    fi
  done

  echo -e "successfully installed packages:\x1b[32m ${package_success[@]}\x1b[0m"
  if [ ${#package_failed[@]} -ne 0 ]; then
    if [ ${#package_failed[@]} -eq 1 ]; then
      echo -e "failed to install package:\x1b[31m ${package_failed[@]}\x1b[0m"
    else
      echo -e "failed to install packages:\x1b[31m ${package_failed[@]}\x1b[0m"
    fi
    echo see .setup_log for details
  fi
}

# it's already in ~/.local/bin by default
# so.. this does nothing in most cases
mkdir -p ~/.local/bin

rm -f .setup_log

run 2>&1 | tee -a .setup_log
