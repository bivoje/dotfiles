#!/bin/bash

# [[]] vs []
# https://stackoverflow.com/a/47576482

# why quote "${arr[@]}"?
# first comment of https://stackoverflow.com/a/8880633

# bash directory stack
# https://www.gnu.org/software/bash/manual/html_node/Directory-Stack-Builtins.html

MESSAGE() {
  echo -e "\x1b[33m:: SETUP:" $@ "\x1b[0m"
}

DUMP() {
  echo -e ">" $@
}

# ==============================================================
# ================== installation configure ====================
# ==============================================================

# requires bash, wget, tar, ed to work properly

# list of packages that is globally and locally available
g_packs=()
l_packs=()

# libraries
g_packs+=(make libgcc autoconf autotools-dev libtool automake readline-dev)

# utilities
g_packs+=(inotify-tools tmux vim rlwrap python3 curl git python3-pip)
g_packs+=(bat)
# TODO: consider adding bat-extras lesspipe vimpager fd ripgrep fzf

# TODO exclude packages that are already installed?
# TODO give option to force re-install?

# FIXME
package_install=(upgrade update)


# --------------------------------------------------------------
# ------------------- custom install scripts -------------------

# https://stackoverflow.com/a/58964551 for (set -e ...) trick

g_packs+=(python3-pip)
ginstall_package_python3-pip() {
  case "$system" in
    debian)
      DUMP ginstall_default_debian python3-pip
      ginstall_default_debian python3-pip ;;
    alpine)
      DUMP ginstall_default_alpine py3-pip
      ginstall_default_alpine py3-pip ;;
    *)
      echo "can't install pip in $system"
      return 1
      ;;
  esac
}

g_packs+=(gcc)
ginstall_package_gcc() {
  case "$system" in
    debian)
      DUMP ginstall_default_debian build-essential
      ginstall_default_debian build-essential ;;
    alpine)
      DUMP ginstall_default_alpine build-base
      ginstall_default_alpine build-base ;;
    *)
      echo "can't install gcc in $system"
      return 1
      ;;
  esac
}

l_packs+=(tt)
linstall_package_tt() {(set -e
    require_packages curl jq
    curl --create-dirs -L https://github.com/lemnos/tt/releases/download/v0.4.2/tt-linux -o $HOME/.local/bin/tt && chmod +x $HOME/.local/bin/tt
    curl --create-dirs -L https://github.com/lemnos/tt/releases/download/v0.4.2/tt.1.gz  -o $HOME/.local/share/man/man1/tt.1.gz
    cat > $HOME/.local/bin/ttq <<-'EOF'
	#!/bin/bash
	num=${1:-5}
	curl http://api.quotable.io/quotes/random?limit=$num | jq '[.[] | .text=.content|.attribution=.author]' | tt -quotes -
	EOF
    chmod +x $HOME/.local/bin/ttq
)}

: 'https://superuser.com/a/665181
usage: show progress bar
extract:  pv mysql.tar.gz | tar -xz
compress: tar cf - /folder-with-big-files -P | pv -s $(du -sb /folder-with-big-files | awk '{print $1}') | gzip > big-files.tar.gz
'
l_packs+=(pv)
linstall_package_pv() {(set -e

	# https://askubuntu.com/a/30581
	depfile="`apt-cache search ^pv$ -f 2>/dev/null | grep -Po 'Filename: .*/\Kpv_.*.deb'`"
	apt download pv
	#dpkg-deb --contents $depfile # check that deb file does not delivers any runtime significat files other than the binary itself

	# https://askubuntu.com/a/1142323
	mkdir pv_tmp # extract with prefix pv_tmp/
	dpkg-deb -x $depfile pv_tmp

	mv pv_tmp/usr/bin/pv $HOME/.local/bin/
	mv pv_tmp/usr/share/man/man1/pv.1.gz $HOME/.local/share/man/man1/

	rm -r pv_tmp $depfile
)}

# installs git locally.
# useful when global git is too old but you are not root.
# requires git command available for cloning the source code.
# installation verification only check for local git, ignoring global installation
# while veri.n of other packages generally accepts global inst.n.
# FIXME works only if all the build dependencies are already met
# https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
l_packs+=(git_local)
linstall_package_git_local() {(set -e
    git clone git://git.kernel.org/pub/scm/git/git.git
    cd git
    make configure
    ./configure --prefix=$HOME/.local
    make all # doc info
    make install # install-doc install-html install-info
    cd ..
    rm -rf git
)}
check_package_git_local() {
  [ -e $HOME/.local/bin/git ]
}


l_packs+=(rlwrap)
linstall_package_rlwrap() {(set -e
  require_packages gcc make readline-dev
  wget --no-check-certificate https://github.com/hanslub42/rlwrap/releases/download/0.46.1/rlwrap-0.46.1.tar.gz
  tar -xzf rlwrap-*.tar.gz
  cd rlwrap-*/
  # had to delete #if/#endif to trigger definitions of bool
  # for some reason, shepherd has glibc.ver > 2.7 but lacks those definitions...
  echo '24d\n27d\nwQ' | ed src/rlwrap.h
  ./configure --prefix=$HOME/.local
  make && make check && make install
  cd ..
  rm -rf rlwrap-*/
)}

l_packs+=(libevent)
linstall_package_libevent() {(set -e
  require_packages gcc make
  # the lastest version
  wget --no-check-certificate https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz
  tar -zxf libevent-*.tar.gz
  cd libevent-*/
  ./configure --prefix=$HOME/.local --enable-shared --disable-openssl
  make
  make install
  cd ..
  rm -rf libevent-*.tar.gz libevent-*/
)}
check_package_libevent() {
  # FIXME can't find global installation...
  # ldconfig does not seem to be working in alpine...
  # https://www.baeldung.com/linux/check-shared-library-installed
  [ -e $HOME/.local/lib/libevent.so ]
}

l_packs+=(ncurses)
linstall_package_ncurses() {(set -e
  require_packages gcc make
  # can''t compile ncurses-6.5 in shepherd, static libc is too old
  wget --no-check-certificate  https://invisible-island.net/archives/ncurses/ncurses-6.0.tar.gz
  tar -zxf ncurses*.tar.gz
  cd ncurses-*/
  mkdir -p $HOME/.local/lib/pkgconfig
  # https://www.linuxquestions.org/questions/linux-newbie-8/recursively-include-headers-in-include-option-for-gcc-763234/#post3726546
  # https://stackoverflow.com/a/37475223
  CPPFLAGS="-P --std=c99 --std=c++98" ./configure --prefix=$HOME/.local --with-shared --with-termlib --enable-pc-files --with-pkg-config-libdir=$HOME/.local/lib/pkgconfig
  make
  make install
  cd ..
  rm -rf ncurses*.tar.gz ncurses-*/
)}
check_package_ncurses() {
  # FIXME can't find global installation...
  # ldconfig does not seem to be working in alpine...
  # https://www.baeldung.com/linux/check-shared-library-installed
  [ -e $HOME/.local/lib/libncurses.so ]
}

l_packs+=(tmux)
linstall_package_tmux() {(set -e
  require_packages libevent ncurses
  # 2022-11-15
  # $ uname -a >> Linux shepherd8 5.4.0-131-generic #147~18.04.1-Ubuntu SMP Sat Oct 15 13:10:18 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
  # $ ldd --version >> ldd (Ubuntu GLIBC 2.27-3ubuntu1.5) 2.27
  # following instruction in https://github.com/tmux/tmux/wiki/Installing
  # but had to adjust versions & options for old stinky shepherd setting

  # the lastes version
  wget --no-check-certificate  https://github.com/tmux/tmux/releases/download/3.3a/tmux-3.3a.tar.gz
  tar -zxf tmux-*.tar.gz
  cd tmux-*/
  CFLAGS="-I$HOME/.local/include -I$HOME/.local/include/ncurses -L$HOME/.local/lib" PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig ./configure --prefix=$HOME/.local/
  make && make install
  cd ..
  rm -rf tmux-*.tar.gz tmux-*/
)}

l_packs+=(vim-plug)
linstall_package_vim-plug() {(set -e
  [ -n "$silent" ] && op="-q" || op=""
  mkdir -p $HOME/.vim/autoload/
  wget $op -O $HOME/.vim/autoload/plug.vim \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
)}
check_package_vim-plug() {
  [ -e $HOME/.vim/autoload/plug.vim ]
}

# FIXME installed locally even when sudo-mode?
l_packs+=(rustup)
linstall_package_rustup() {(set -e
  require_packages gcc libgcc
  [ -n "$silent" ] && op="-q" || op=""
  wget $op -O- https://sh.rustup.rs | sh -s -- -y -q
)
  source $HOME/.cargo/env
}

# FIXME... uses sudo command internally
l_packs+=(stack)
linstall_package_stack() {
  [ -n "$silent" ] && op="-q" || op=""
  wget $op -O- https://get.haskellstack.org/ | sh -s -- $op -f # quietly overwrite binary
}

l_packs+=(tldr)
linstall_package_tldr() {(set -e
  [ -n "$silent" ] && op="-q" || op=""
  wget $op -O $HOME/.local/bin/tldr https://raw.githubusercontent.com/raylee/tldr-sh-client/master/tldr
  chmod +x $HOME/.local/bin/tldr
)}

l_packs+=(lazygit)
linstall_package_lazygit() {(set -e
    LAZYGIT_VERSION=$(wget -q -O- "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | sed -n 's/.*"tag_name": "v\([^"]+\)".*/\1/p')
    wget -O lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    tar --remove-files -- -xf lazygit.tar.gz lazygit
    mv lazygit $HOME/.local/bin
)}

l_packs+=(dash)
linstall_package_lazygit() {(set -e
    DASH_VERSION="dash-static-0.5.11.5_musl-1.2.3" # TODO dynamically fetch?
    wget -O dash.tar.gz "https://github.com/amuramatsu/dash-static/releases/download/${DASH_VERSION}/${DASH_VERSION}.tar.gz"
    tar -xf dash.tar.gz
    rm dash.tar.gz

    cd dash
    case `uname -m` in
        "x86_64") mv dash-amd64 $HOME/.local/bin ;;
        *)  echo "installing dash for `uname -m` is not implemented yet"
            return 1 ;;
    esac
    mkdir -p $HOME/.local/share/man/man1
    mv dash.1 $HOME/.local/share/man/man1/

    cd ..
    rm -rf dash
)}

l_packs+=(bat)
linstall_package_bat() {(set -e
    BAT_VERSION="v0.22.1" # TODO dynamically fetch?
    case `uname -m` in
        "x86_64") BAT_ARCH="i686-unknown-linux-musl" ;;
        *)  echo "installing bat for `uname -m` is not implemented yet"
            return 1 ;;
    esac
    BAT_NAME="bat-${BAT_VERSION}-${BAT_ARCH}"

    wget "https://github.com/sharkdp/bat/releases/download/${BAT_VERSION}/${BAT_NAME}.tar.gz"

    tar -xf ${BAT_NAME}.tar.gz
    rm ${BAT_NAME}.tar.gz

    cd ${BAT_NAME}
    mv bat $HOME/.local/bin
    mkdir -p $HOME/.local/share/man/man1
    mv bat.1 $HOME/.local/share/man/man1/

    cd ..
    rm -rf ${BAT_NAME}
)}

l_packs+=(clf)
linstall_package_clf() {(set -e
  require_packages python3-pip
  [ -n "$silent" ] && op="-q" || op=""
  su $user -c "pip install $op --user clf"
)}

l_packs+=(pipes)
linstall_package_pipes() {(set -e
  # TODO requirements:
  # - Bash 4+ since version 1.0.0.
  # - ncurses for tput
  #     >= 6.1 (2018-01-27) for 24-bit colors and TERM=*-direct.
  [ -n "$silent" ] && op="-q" || op=""
  wget $op -O $HOME/.local/bin/pipes https://raw.githubusercontent.com/pipeseroni/pipes.sh/master/pipes.sh
  chmod +x $HOME/.local/bin/pipes
)}

l_packs+=(ascii)
linstall_package_ascii() {(set -e
  require_packages make
  [ -n "$silent" ] && op="-q" || op=""
  wget $op http://www.catb.org/~esr/ascii/ascii-3.18.tar.gz
  tar xzf ascii-3.18.tar.gz
  cd ascii-3.18
  make $op
  mv ascii $HOME/.local/bin
  cd ..
  rm -rf ascii-3.18 ascii-3.18.tar.gz
)}

l_packs+=(hc)
linstall_package_hc() {(set -e
  if false && [ "`uname -ms`" == 'Linux x86_64' ]; then
    # FIXME; required ldd''s...
    # libpthread.so.0 => /lib64/ld-linux-x86-64.so.2 (0x7f5e39b08000)
    # libm.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7f5e39b08000)
    # libdl.so.2 => /lib64/ld-linux-x86-64.so.2 (0x7f5e39b08000)
    # libc.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7f5e39b08000)
    DUMP linstall_package_hc_download
    [ -n "$silent" ] && op="-q" || op=""
    wget $op -O $HOME/.local/bin/hc https://github.com/bivoje/hex-calculator/releases/download/rel-1.0.0/hc-linux_x86_64-1.0.0
    chmod +x $HOME/.local/bin/hc
  else
    DUMP linstall_package_hc_build
    require_packages rustup git
    #source $HOME/.cargo/env ???
    [ -n "$silent" ] && op="-q" || op=""
    cargo install $op --git https://github.com/bivoje/hex-calculator.git
  fi
)}

l_packs+=(inotify-tools)
linstall_package_inotify-tools() {(set -e
  require_packages git make gcc automake autoconf libtool #autotools-dev
  git clone -b 3.22.1.0 https://github.com/inotify-tools/inotify-tools.git --depth=1
  cd inotify-tools
  mkdir target
  ./autogen.sh
  ./configure --prefix=$HOME/.local
  make
  make install
  cd ..
  rm -rf inotify-tools
)}
check_package_inotify-tools() {
  which inotifywait &>/dev/null
}

# --------------------------------------------------------------
# --------------------- debian specific ------------------------

ginstall_default_debian() {
  if [ -z "$1" ]; then # initialize if called without an argument
    [ -n "$silent" ] && op="-qq" || op=""
    apt-get $op update
    apt-get upgrade -y $op
    return
  fi

  [ -n "$silent" ] && op="-qq" || op=""
  apt-get $op install -y $1
}

check_default_debian() {
  dpkg -s $1
}

# --------------------------------------------------------------
# --------------------- redhat specific ------------------------

ginstall_default_redhat() {
  if [ -z "$1" ]; then # initialize if called without an argument
    [ -n "$silent" ] && op="-q -e 0" || op=""
    yum upgrade -y
    return
  fi

  [ -n "$silent" ] && op="-q -e 0" || op=""
  yum install $op -y $1
}

check_default_redhat() {
  rpm -q $1 &>/dev/null
  #TODO use -qa | grep?
}

# --------------------------------------------------------------
# --------------------- alpine specific ------------------------

ginstall_default_alpine() {
  if [ -z "$1" ]; then # initialize if called without an argument
    apk update
    apk upgrade
    return
  fi

  apk add $1
}

check_default_alpine() {
  apk info -e $1 > /dev/null
}


# ==============================================================
# ===================== utility routines =======================
# ==============================================================

# --------------------------------------------------------------
# --------------------- package related ------------------------

check_package() {
  sleep 0.1 # wait for filesystem to update...
  pack=$1
  if declare -F check_package_$pack > /dev/null; then
    check_package_$pack
  else
    which $pack &> /dev/null || check_default_$system $pack
  fi
}

# be careful to avoid making infinite recursion with dependency cycle
require_packages() {
  for pack in $@; do
    if ! check_package $pack; then
      install_package $pack
      # https://www.baeldung.com/linux/bash-script-raise-error
      # (set -e ...) trick does not work with loop
      if [ $? -ne 0 ]; then return 1; fi
    fi
  done
}

# FIXME set -e
install_package() {
  DUMP install_package $@
  # https://stackoverflow.com/a/9529981 (declare -F)
  # https://stackoverflow.com/a/15394738 (find in array)
  pack=$1

  if check_package $pack; then
    DUMP "package $pack is already installed"
    return 0
  fi

  if [ -n "$issudo" ] && [[ " ${g_packs[*]} " =~ " $pack " ]]; then
    # this package can be globally installed
    if declare -F ginstall_package_$pack > /dev/null; then
      DUMP ginstall_package_$pack
      ginstall_package_$pack # custom install script
    else
      DUMP ginstall_default_$system $pack
      ginstall_default_$system $pack # system default install
    fi

  elif declare -F linstall_package_$pack > /dev/null; then
    # this package can only be installed locally
    DUMP linstall_package_$pack
    linstall_package_$pack

  else
    >&2 echo "unrecognized package '$pack'"
    return 1
  fi
}

run() {
  package_install=($@)
  package_failed=()
  package_success=()

  if [ ${#package_install[@]} -eq 0 ]; then
    MESSAGE "nothing to install"
    return 0
  fi

  if [ -n "$issudo" ]; then
    MESSAGE "Initializing..."
    ginstall_default_$system # initialize package manager
    MESSAGE "Done!"
  fi

  # FIXME forces bash
  for (( i = ${#package_install[@]}-1 ; 0 <= i ; i-- )) ; do
    pack="${package_install[$i]}"

    if check_package $pack; then
      package_success+=("$pack")
      MESSAGE "package $pack is already installed"
      continue
    fi

    MESSAGE "try installing $pack"
    install_package "$pack"

    if [ $? -eq 0 ]; then
      if check_package $pack; then
        package_success+=("$pack")
        MESSAGE "successfully installed $pack"
      else
        package_failed+=("$pack")
        MESSAGE "done installing $pack but can't verify"
      fi
    else
      package_failed+=("$pack")
      MESSAGE "failed installing $pack"
    fi
  done

  if [ ${#package_success[@]} -ne 0 ]; then
    echo -e "successfully installed packages:\x1b[32m ${package_success[@]}\x1b[0m"
  fi
  if [ ${#package_failed[@]} -ne 0 ]; then
    if [ ${#package_failed[@]} -eq 1 ]; then
      echo -e "failed to install package:\x1b[31m ${package_failed[@]}\x1b[0m"
    else
      echo -e "failed to install packages:\x1b[31m ${package_failed[@]}\x1b[0m"
    fi
    echo see .setup_log for details
    return 1
  else
    return 0
  fi
}


# --------------------------------------------------------------
# ------------------------ UI related --------------------------

# edit two global arrays package_candidates, package_install
interactively_edit_package_selection() {
  # coloring done with help from https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
  while [ ${#package_candidate[@]} -ne 1 ]; do

    if [ $package_candidate == '-' ]; then
      # package_condiate.pop_front()
      package_candidate=("${package_candidate[@]:1}")
      # package_candidate.push_back('-')
      package_candidate+=('-')
    fi

    # package = package_condiate.pop_front()
    package="${package_candidate[0]}"
    package_candidate=("${package_candidate[@]:1}")

    cand_num=${#package_candidate[@]}
    echo -en "\x1b[2K" # erase the entire line
    echo -ne "packages to be installed |\x1b[32m"
    for pack in "${package_install[@]}"; do
      echo -n " $pack"
    done
    echo -e "\x1b[0m"

    echo -e "\x1b[2K" # erase the entire line
    echo -en " installation candidates |\x1b[31m $package"
    for (( i = 0 ; i < $cand_num ; i++ )) ; do # FIXME forces bash
      pack="${package_candidate[$i]}"
      if [ "$pack" == "-" ]; then
        if [ $i == $(($cand_num-1)) ]; then
          continue
        else
          echo -ne "\x1b[33m !\x1b[31m"
        fi
      else
        echo -n " $pack"
      fi
    done
    echo -en "\x1b[0m"

    echo -e "\x1b[2A" # move cursor up 2 lines
    echo -en "\x1b[2K" # erase the entire line
    echo -ne "  do you want to install \x1b[34m$package\x1b[0m? (Ynqader?) "
    read -e ans
    ans=${ans// } # remove spaces

    if [ "$ans" == Y ] || [ "$ans" == y ] || [ -z "$ans" ]; then
      # package_install.push_front(package)
      package_install=("$package" "${package_install[@]}")

    elif [ "$ans" == N ] || [ "$ans" == n ]; then
      # package_candidate.push_back(package)
      package_candidate+=("$package")

    elif [ "$ans" == Q ] || [ "$ans" == q ]; then
      # package_candidate.extend(package_install.drain())
      package_candidate+=("${package_install[@]}")
      package_install=()
      break

    elif [ "$ans" == A ] || [ "$ans" == a ]; then
      # package_install.push_front(package)
      package_install=("$package" "${package_install[@]}")
      # package_install.push_front(package_candidate.drain_until('-'))
      for pack in "${package_candidate[@]}"; do
        if [ "$pack" == '-' ]; then break; fi
        package_install=("$pack" "${package_install[@]}")
      done
      package_candidate=("${package_candidate[@]:$i}")
      break

    elif [ "$ans" == D ] || [ "$ans" == d ]; then
      break

    elif [ "$ans" == E ] || [ "$ans" == e ]; then
      echo -en "\x1b[1A\x1b[2K" # replace orig prompt
      read -p "  packages to install: " -a package_additional
      # package_install.extend_front(package_additional.drain())
      package_install=("${package_additional[@]}" "${package_install[@]}")
      package_additional=()
      # package_candidate.push_front(pakcage)
      package_candidate=("$package" "${package_candidate[@]}")

    elif [ "$ans" == R ] || [ "$ans" == r ]; then
      # package_candidate.push_front(package)
      package_candidate=("$package" "${package_candidate[@]}")
      # if package_install.len() > 0
      if [ ${#package_install[@]} -gt 0 ]; then
        # package_candidate.push_front(package_install.pop_front())
        package_candidate=("${package_install[0]}" "${package_candidate[@]}")
        package_install=("${package_install[@]:1}")
      fi

    else
      # package_candidate.push_front(pakcage)
      package_candidate=("$package" "${package_candidate[@]}")
      echo "" # move cursor 1 line down
      echo -en "\x1b[35m"
      echo "y - install selected package"
      echo "n - do not install selected package"
      echo "q - quit; do not install anything"
      echo "a - install this and any later packages till '!'"
      echo "d - do not install this or any of the remaining packages"
      echo "e - manually add package name"
      echo "r - revert last acepttance"
      echo "? - print help"
      echo "\n\n"
      echo -en "\x1b[0m"
    fi

    echo -en "\x1b[2A" # move up 2 lines
  done

  echo "" # move down 1 line
}


# --------------------------------------------------------------
# --------------------- miscellaneous --------------------------

find_system() {
  if [ -f "/etc/debian_version" ]; then
    echo debian
  elif [ -f "/etc/redhat-release" ]; then
    echo redhat
  elif [[ "`grep "^NAME=" /etc/os-release`" =~ "Alpine" ]]; then
    # https://www.cyberciti.biz/faq/how-to-check-os-version-in-linux-command-line/
    echo alpine
  else
    echo unknown
  fi
}

initialize_install_candidate() {
  default_install=(vim tmux git vim-plug tldr hc ascii)
  default_install=(`echo ${default_install[@]} |tr ' ' '\n'|sort|uniq`)

  # https://askubuntu.com/a/15856
  if [ -n "$issudo" ]; then
    # with root privilege
    packages=(`echo ${l_packs[@]} ${g_packs[@]} |tr ' ' '\n'|sort|uniq`)
  else
    # no root privilege
    packages=(`echo ${l_packs[@]} |tr ' ' '\n'|sort|uniq`)
  fi

  package_candidate=(`comm -23 <(echo ${packages[@]}|tr ' ' '\n') <(echo ${default_install[@]}|tr ' ' '\n')`)
  package_install=(`comm -12 <(echo ${packages[@]}|tr ' ' '\n') <(echo ${default_install[@]}|tr ' ' '\n')`)

  package_candidate+=("-")
}

# ==============================================================
# ========================= main ===============================
# ==============================================================

# TODO automatically install vim-plug - plugins?
# TODO implement terminal-version notify-send
# TODO add version & help messages

# TODO install golfscript

# pipe fail as a whole if any of subproc fails
# useful for checking failure of `wget -O- <URL> | sh` installs
set -o pipefail

silent=$2 #FIXME
system=${system:-`find_system`} # adopt if user explicitly set
issudo=`[ "$EUID" -eq 0 ] && echo true`
user=${SUDO_USER:-${USER}} # https://askubuntu.com/a/1034050


if [ -z "$1" ]; then
  initialize_install_candidate
  interactively_edit_package_selection
else
  package_install=($@)
fi


# it's already in $HOME/.local/bin by default
# so.. this does nothing in most cases
mkdir -p $HOME/.local/bin
mkdir -p $HOME/.local/lib
rm -f $HOME/.setup_log

rm -rf $HOME/.setup_temp
mkdir -p $HOME/.setup_temp
cd $HOME/.setup_temp

run ${package_install[@]} 2>&1 | tee -a $HOME/.setup_log

if [ "$?" -eq "0" ]; then
  rmdir $HOME/.setup_temp
fi
