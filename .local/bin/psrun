#!/bin/bash

# options
# - positional args are files to watch for
# - l, lang: use language default config if '-c' or '-e' is omitted
# - c, compile: compilation command. $n will be substituted with 'files'.
# - e, execute: execution command. $n will be substituted with 'files'.
# - d, execute: execution command. $n will be substituted with 'files'.
# - n, dry: show scripts to be run

# usage
# $ psrun -l brainfuck ps.gs input
# $ psrun -l rust ps.rs input
# $ psrun -l rust -c 'rustc --edition=2018 $1 -o ps' ps.rs input
# $ psrun -l rust -e '"export RUST_BACKTRACE=full; ./ps < $2"' ps.rs input


default_compile() {
  case "$1" in
    rust)
	echo 'rustc --color=always --edition=2021 $1 -o ps' ;;
    cpp)
	echo 'g++ -fdiagnostics-color=always $1 -o ps' ;;
  esac
}

default_execute() {
	case "$1" in
	rust)
		echo 'RUST_BACKTRACE=1 ./ps < $INPUT' ;;
	golfscript)
		echo 'golfscript $1 < $INPUT' ;;
	python3)
		# from https://stackoverflow.com/a/59507107
		echo \
			'python3 $1 < $INPUT 2> >( \
				sed -e "s/Traceback/\x1b[0;1;33;44m&\x1b[0m/g" \
					-e "s/File \".*\.py\".*$/\x1b[0;1m&\x1b[0m/g" \
					-re "s/\, line [0-9]\+/\x1b[0;1;31m&\x1b[0m/g" \
					-re "s/ {4}(.*)$/\x1b[0;1;33m&\x1b[0m/g" \
					-e "s/.*Error:.*$/\x1b[0;1;31m&\x1b[0m/g" \
				>&2 \
			)'
		;;
	*)
		echo './ps < $INPUT' ;;
  esac
}

lang_from_src() {
    case "${1##*.}" in
        rs) echo 'rust' ;;
        gs) echo 'golfscript' ;;
        py) echo 'python3' ;;
    esac
}

subst_args() {
	str="$1"
	shift

	# https://stackoverflow.com/a/13210909

	str="${str//\$1/$1}"
	str="${str//\$2/$2}"
	str="${str//\$3/$3}"
	str="${str//\$4/$4}"
	str="${str//\$5/$5}"

	if [ -n "$INPUT" ]; then
		str="${str//\$INPUT/$INPUT}"
	else
		str="${str//\$INPUT/\/dev\/null}"
	fi

	echo "$str"
}

LANG=''
COMPILE=''
EXECUTE=''
FILES=()
DRY='false'
AUTO='false'
HEIGHT=''
PAGER='head'
TIMEOUT='5'

while [[ $# -gt 0 ]]; do
  case $1 in
    -l|--lang)
      LANG=$2
      shift; shift ;;
    -c|--compile)
      COMPILE=$2
      shift; shift ;;
    -e|--execute)
      EXECUTE=$2
      shift; shift ;;
    -n|--dry)
      DRY='true'
      shift ;;
    -a|--auto)
      AUTO='true'
      shift ;;
    -h|--head)
      PAGER='head'
      if [[ "$2" =~ ^[0-9]+$ ]]; then
        HEIGHT=$2
        shift
      fi
      shift ;;
    -t|--tail)
      PAGER='tail'
      if [[ "$2" =~ ^[0-9]+$ ]]; then
        HEIGHT=$2
        shift
      fi
      shift ;;
    --timeout)
	TIMEOUT="$2"
	shift; shift ;;
    -*|--*)
      echo "unknown option; '$1' ignoring... "
      shift; shift ;;
    *)
      FILES+=($1)
      shift ;;
  esac
done

if [ -n "$HEIGHT" ] && [ "$HEIGHT" -eq 0 ]; then
	HEIGHT=''
fi

if [ "$AUTO" == 'true' ]; then
    if [ -z "$LANG" ]; then
        LANG="`lang_from_src ${FILES[0]}`"
    fi
fi

if [ -n "$LANG" ]; then
  if [ -z "$COMPILE" ]; then
    COMPILE="`default_compile $LANG`"
  fi

  if [ -z "$EXECUTE" ]; then
    EXECUTE="`default_execute $LANG`"
  fi
fi

ECOMPILE="$(subst_args "$COMPILE" "${FILES[@]}" NULL NULL NULL NULL NULL)"
EEXECUTE="$(subst_args "$EXECUTE" "${FILES[@]}" NULL NULL NULL NULL NULL)"

if [ "$DRY" == 'true' ]; then
  echo '$LANG    ' $LANG
  echo '$COMPILE ' $COMPILE
  echo '$EXECUTE ' $EXECUTE
  echo '$FILES   ' ${FILES[@]}

  echo '$ECOMPILE' $ECOMPILE
  echo '$EEXECUTE' $EEXECUTE

  echo '(set -o pipefail &&' $ECOMPILE '2>&1 | head -40)' "\\"
  echo "  " "&& timeout --signal KILL $TIMEOUT bash -c" \" "$EEXECUTE" \"
  exit
fi

# FIXME compiler's warning may overspill the screen
runit() {
  # 'timeout' in some systems does not support long option (--signal)
  (set -o pipefail && $ECOMPILE 2>&1 | $PAGER -${HEIGHT:-$((`tput lines`-5))} ) \
    && timeout -s KILL $TIMEOUT bash -c "$EEXECUTE" | $PAGER -${HEIGHT:-$((`tput lines`-5))}
}

# do-while
runit
# need to watch DELETE_SELF since vim or gcc removes file before overwriting target file.
# the file will already be generated by the time the loop body is finished.
while inotifywait -e modify -e move_self -e delete_self "${FILES[@]}"; do
	# inotify reports error for other types of access to FILES
	clear;
	# for vim latency;
	# since vim first moves the file before actualy writing to it, it may take a take for the fiel to actually get written
	sleep 0.1
	runit
done
