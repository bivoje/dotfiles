" use ':so %' to source current file

" TODO
" use CTRL-U, CTRL_W while insert mode!

" applied when opening file
set fileencodings=utf8,euc-kr
" applied when editing file
set encoding=utf8

" eol chars preference
set fileformats=unix,dos " set ffs


" remove trailing whitespaces before saving
fun! CleanTrailingSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun
if has("autocmd")
    "   guard by extension
    autocmd BufWritePre *.c,*.cpp,*.zig,*py,*rs,*sh,*.hs,*.js :call CleanTrailingSpaces()
    "   guard by filetype (whenever vim sets filetype)
    "autocmd FileType c,cpp autocmd BufWritePre <buffer> %s/\s\+$//e
    " Note that filetypes that are detected automatically can be found in /usr/share/vim/vim*/filetype.vim
    " and corresponding syntax files are in /usr/share/vim/vim*/syntax/*
    " https://vi.stackexchange.com/a/16950
endif
" TODO check if unknown filetype and warn on load?

" FIXME
" persistent undo. undo history prevails even after exit
" some sensitive info could remain in undofiles though..
if exists("&undodir")
    try
        set undodir=~/.vim_runtime/temp_dirs/undodir
        set undofile
    catch
    endtry
endif

" bash-like keymaps for command mode editing
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-C> <Down>
" TODO more..?

" how to how _invisible_ characters
" use 'set list' to view reveal them
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_

" :noh to remove current highlights
set hlsearch

" use space to remove current hightlighs
noremap <silent> <space> :noh<cr>

" apply search while typing
"set incsearch

" case insensitive search
" case sensitive only when search string includes upper case
"set ignorecase smartcase
" or you can use /\cSEARCH for temporary case insensitive search

" enable special classes (\a, \w..) in regex
set magic

" blink to a opening pair (when) closing bracket typed
set showmatch
" blink how for how long? * 0.1 sec
set matchtime=1 " set mat

" prevent annoying bells
"set belloff=all

" wrap the selected text with parenthesis or quote
" direct macro execution while on visual mode does not seem to work properly
" so i decided to avoid using @ to invoke macro and repurposed it
" Note that for visual block, it does not work vertically.. use macro instead..
vnoremap @( <esc>`>a)<esc>`<i(<esc>
vnoremap @[ <esc>`>a]<esc>`<i[<esc>
vnoremap @{ <esc>`>a}<esc>`<i{<esc>
vnoremap @" <esc>`>a"<esc>`<i"<esc>
vnoremap @' <esc>`>a'<esc>`<i'<esc>
vnoremap @` <esc>`>a`<esc>`<i`<esc>
vnoremap @<space> <esc>`>a<space><esc>`<i<space><esc>

" auto complete parenthesis or quote
" remove '@' prefix to get annoying, VScode style auto completion
" it became rather hard to write '@' and \"@" in this way though..
inoremap @( ()<esc>i
inoremap @[ []<esc>i
inoremap @{ {<cr>}<esc>ko
inoremap @" ""<esc>i
inoremap @' ''<esc>i
inoremap @` ``<esc>i

" like notion's abbreviation. cannot put '@' in the first place though.
iab now@ <C-r>=strftime("%y-%m-%d %H:%M:%S")<cr>

" move between windows faster
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" move between tabs faster
noremap tn :tabn<cr>
noremap tp :tabp<cr>
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" jk for esc everywhere!
inoremap jk <esc>
inoremap JK <esc>
inoremap <esc> <NOP>
cnoremap jk <esc>
cnoremap JK <esc>

" stop using arrow keys!
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Right> <NOP>
nnoremap <Left> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Right> <NOP>
inoremap <Left> <NOP>

" use advanced moving!
"nnoremap h <NOP>
"nnoremap j <NOP>
"nnoremap k <NOP>
"nnoremap l <NOP>
"
"vnoremap h <NOP>
"vnoremap j <NOP>
"vnoremap k <NOP>
"vnoremap l <NOP>

" use advanceed editing?
"inoremap i o O a A x X

" enable per-directory vimrc
" set exrc

" use colorscheme ron
try
  colo ron
catch
endtry

" will use lighter colors within the colorscheme
set background=dark

" hold and move current line up/downward
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" print current function name
" https://vi.stackexchange.com/a/12429
" finds the first un-indented line starting with an alphabet
nnoremap <C-n> :echo getline(search('\v^[[:alpha:]$_]', "bn", 1, 100))<CR>
" 'Ctrl-N' were used as synonym to 'j'

" auto indent when new line created
set autoindent " set ai

" guess the indentation by syntax context
set smartindent " set si

" # of columns that <tab> would occupy
set tabstop=8

" use equivalent # of space whenever tab
set expandtab " set et

" when inserting tab at ^, use shiftwidth instead of tabstop
set smarttab

" base indent width
set shiftwidth=4

" show line and column number
set ruler

" show cmd mid input
set showcmd

" syntax highlighting, use 'on' to respect vim's defaults
syntax enable

" make backspaces more powerfull
set backspace=indent,eol,start

" see the help for ':filetype-overview'
" turn on filetype detection, load <filetype>.vim configscript
" & load indent.vim for the filetype
" & load plugins for the filetype
" when open/editing such a file with filetype.
filetype indent plugin on

" use # spaces for shifting smaller than stabstop
set softtabstop=4

" show line number
set nu
"set width of line number display
"set nuw=?

" show line number relatively to cursor line
" setting both nu & rnu give hybrid mode, rnu + absolute on current line
set relativenumber " set rnu

" set/unset rnu automatically only when navigating
" https://jeffkreeftmeijer.com/vim-number/
"augroup numbertoggle
"  autocmd!
"  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
"  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
"augroup END


" # of additional rows to show above/below the cursor
set scrolloff=3 " set so=3

" force this settings when opening rust and python files
"autocmd FileType rust,python setlocal expandtab shiftwidth=2 softtabstop=2

" fold code
set foldmethod=syntax

" don't fold code when just opened
set nofoldenable

" column width to indicate folding depth, on the left to nu column
"set foldcolumn=1 " set fdc

" highlights current cursor line/column
"set cursorline
"set cursorcolumn

" pairs that can wrap by '%'
set matchpairs+=<:>

" simple calculation with <num><C-x> or <C-a>
" e.g. 248<C-x> to subtract 248 from a value in buffer

" create operator with function, operators are something like c-, d-, y-
" prefixes of command
"set operatorfunc

" reverse right-left, for trolling purpose?
"set rl

" insert reversed, with rl option, you can write davinci's mirrored encryption
"set revins

" write 'modeline' commands for file-specific options
"set modeline

" always show status line
" you can get filename & pos % with <C-g>
"set laststatus=2

"set statusline
"set tabline
set wildmenu

" wrapped lines can be traveled with g[0^jk$]
" % sends you to closest opening bracket before the cursor

" redraw screen once after the macro execution is completeted
set lazyredraw

" help cmd context
" :h :r         ex command (command starting with a colon)
" :h r          normal mode
" :h v_r        visual mode
" :h i_CTRL-W   insert mode
" :h c_CTRL-R   ex command line
" :h /\r        search pattern (in this case, :h \r also works)
" :h 'ro'       option
" :h -r         Vim argument (starting Vim)

" since version 8, vim supports bracketed-paste
" stolen from :help xterm-bracketed-paste
if v:version >= 800
  if &term =~ "screen"
    let &t_BE = "\e[?2004h"
    let &t_BD = "\e[?2004l"
    exec "set t_PS=\e[200~"
    exec "set t_PE=\e[201~"
  endif
else
  " https://github.com/ConradIrwin/vim-bracketed-paste/blob/master/plugin/bracketed-paste.vim
  if exists("g:loaded_bracketed_paste")
    finish
  endif
  let g:loaded_bracketed_paste = 1

  let &t_ti .= "\<Esc>[?2004h"
  let &t_te = "\e[?2004l" . &t_te

  function! XTermPasteBegin(ret)
    set pastetoggle=<f29>
    set paste
    return a:ret
  endfunction

  execute "set <f28>=\<Esc>[200~"
  execute "set <f29>=\<Esc>[201~"
  map <expr> <f28> XTermPasteBegin("i")
  imap <expr> <f28> XTermPasteBegin("")
  vmap <expr> <f28> XTermPasteBegin("c")
  cmap <f28> <nop>
  cmap <f29> <nop>
  "FIXME exit insert mode after pasting when invoked during normal mode?
endif

" use my-defined color scheme for vimdiff use
" the default for vimdiff is no less than an eyebleach
if &diff
    colorscheme diffcolors
endif

"vim-plug section
if ! empty(globpath(&rtp, 'autoload/plug.vim'))
  call plug#begin('~/.vim/plugged')
    Plug 'ziglang/zig.vim'
  call plug#end()

  let g:zig_fmt_autosave = 0
endif
