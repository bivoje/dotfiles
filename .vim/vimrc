set fileencodings=utf8,euc-kr

" remove trailing whitespaces before saving
"   guard my extension
autocmd BufWritePre *.c,*.cpp,*.zig :%s/\s\+$//e
"   guard by filetype (whenever vim sets filetype)
" autocmd FileType c,cpp autocmd BufWritePre <buffer> %s/\s\+$//e

" :noh to remove current highlights
set hlsearch

" jk for esc everywhere!
inoremap jk <esc>
inoremap JK <esc>
inoremap <esc> <NOP>
cnoremap jk <esc>
cnoremap JK <esc>

" stop using arrow keys!
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Right> <NOP>
nnoremap <Left> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Right> <NOP>
inoremap <Left> <NOP>

" use advanced moving!
"nnoremap h <NOP>
"nnoremap j <NOP>
"nnoremap k <NOP>
"nnoremap l <NOP>
"
"vnoremap h <NOP>
"vnoremap j <NOP>
"vnoremap k <NOP>
"vnoremap l <NOP>

" use advanceed editing?
"inoremap i o O a A x X

" enable per-directory vimrc
" set exrc

" use colorscheme ron
colo ron

" hold and move current line up/downward
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" print current function name
" https://vi.stackexchange.com/a/12429
" finds the first un-indented line starting with an alphabet
nnoremap <C-n> :echo getline(search('\v^[[:alpha:]$_]', "bn", 1, 100))<CR>
" 'Ctrl-N' were used as synonym to 'j'

" auto indent when new line created
set autoindent

" guess the indentation by syntax context
set smartindent

" # of columns that <tab> would occupy
set tabstop=8

" use equivalent # of space whenever tab
set expandtab " set et

" base indent width
set shiftwidth=2

" show line and column number
set ruler

" show cmd mid input
set showcmd

" syntax highlighting
syntax on

" make backspaces more powerfull
set backspace=indent,eol,start

" see the help for ':filetype-overview'
" turn on filetype detection, load <filetype>.vim configscript
" & load indent.vim for the filetype
" & load plugins for the filetype
" when open/editing such a file with filetype.
filetype indent plugin on

" use # spaces for shifting smaller than stabstop
set softtabstop=2

" show line number
set nu
"set width of line number display
"set nuw=?

" show line number relatively to cursor line
"set rnu 

" # of additional rows to show above/below the cursor
set scrolloff=3 " set so=3

" force this settings when opening rust and python files
autocmd FileType rust,python setlocal expandtab shiftwidth=2 softtabstop=2

" fold code 
set foldmethod=syntax

" don't fold code when just opened
set nofoldenable

" highlights current cursor line/column
"set cursorline
"set cursorcolumn

" pairs that can wrap by '%'
set matchpairs+=<:>

" simple calculation with <num><C-x> or <C-a>
" e.g. 248<C-x> to subtract 248 from a value in buffer

" create operator with function, operators are something like c-, d-, y-
" prefixes of command
"set operatorfunc

" reverse right-left, for trolling purpose?
"set rl

" insert reversed, with rl option, you can write davinci's mirrored encryption
"set revins

" write 'modeline' commands for file-specific options

"set statusline
"set tabline
set wildmenu

"wrapped lines can be traveled with g[0^jk$] 
"% sends you to closest opening bracket before the cursor

" redraw screen once after the macro execution is completeted
set lazyredraw


" from https://vi.stackexchange.com/a/348
"function! Paste_Func()
"    let s:inPaste = &paste
"    if !s:inPaste
"        set paste
"    endif
"
"    echom s:inPaste
"    augroup paste_callback
"        autocmd!
"        autocmd InsertLeave <buffer> call Paste_End()
"    augroup END
"
"    startinsert
"endfunction
"
"function! Paste_End()
"    augroup paste_callback
"        autocmd!
"    augroup END
"    augroup! paste_callback
"
"    if !s:inPaste
"        set nopaste
"    endif
"endfunction
"
"map _i :call Paste_Func()<cr>




" code from:
" http://stackoverflow.com/questions/5585129/pasting-code-into-terminal-window-into-vim-on-mac-os-x
" then https://coderwall.com/p/if9mda
" and then https://github.com/aaronjensen/vimfiles/blob/59a7019b1f2d08c70c28a41ef4e2612470ea0549/plugin/terminaltweaks.vim
" to fix the escape time problem with insert mode.
" then finally https://github.com/ConradIrwin/vim-bracketed-paste/blob/master/plugin/bracketed-paste.vim
"
" Docs on bracketed paste mode:
" http://www.xfree86.org/current/ctlseqs.html
" Docs on mapping fast escape codes in vim
" http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim

"if exists("g:loaded_bracketed_paste")
"  finish
"endif
"let g:loaded_bracketed_paste = 1
"
"let &t_ti .= "\<Esc>[?2004h"
"let &t_te = "\e[?2004l" . &t_te
"
"function! XTermPasteBegin(ret)
"  set pastetoggle=<f29>
"  set paste
"  return a:ret
"endfunction
"
"execute "set <f28>=\<Esc>[200~"
"execute "set <f29>=\<Esc>[201~"
"map <expr> <f28> XTermPasteBegin("i")
"imap <expr> <f28> XTermPasteBegin("")
"vmap <expr> <f28> XTermPasteBegin("c")
"cmap <f28> <nop>
"cmap <f29> <nop>
"FIXME exit insert mode after pasting when invoked during normal mode?
