#!/bin/bash

# [[]] vs []
# https://stackoverflow.com/a/47576482

# why quote "${arr[@]}"?
# first comment of https://stackoverflow.com/a/8880633

# bash directory stack
# https://www.gnu.org/software/bash/manual/html_node/Directory-Stack-Builtins.html

# ==============================================================
# ===================== script configure =======================
# ==============================================================

# pipe fail as a whole if any of subproc fails
# useful for checking failure of `curl <URL> | sh` installs
set -o pipefail

system=unknown

if [ -f "/etc/debian_version" ]; then
  system=debian
fi

# should be topologically ordered on dependency, the later, the more dependent
package_candidate=(make build-essential ascii vim-plug tmux python3 rustup stack '-')
# packages installed in reverse order
package_install=(vim tldr curl upgrade)

# TODO add profile...?
# default settings for non root installs
# minimallistic configure ...

# TODO sudo ditinguish sudo version?

# ==============================================================
# ===================== querying ===============================
# ==============================================================

while [ ${#package_candidate[@]} -ne 1 ]; do

  if [ $package_candidate == '-' ]; then
    # package_condiate.pop_front()
    package_candidate=("${package_candidate[@]:1}")
    # package_candidate.push_back('-')
    package_candidate+=('-')
  fi

  # package = package_condiate.pop_front()
  package="${package_candidate[0]}"
  package_candidate=("${package_candidate[@]:1}")

  cand_num=${#package_candidate[@]}
  echo -n "packages to be installed |"
  for pack in "${package_install[@]}"; do
    echo -n " $pack"
  done
  echo ""

  echo -n " installation candidates | $package"
  for (( i = 0 ; i < $cand_num ; i++ )) ; do # FIXME forces bash
    pack="${package_candidate[$i]}"
    if [ "$pack" == "-" ] && [ $i == $(($cand_num-1)) ]; then
      continue
    fi
    echo -n " $pack"
  done
  echo ""

  # TODO COLOR
  read -p "  do you want to install $package? (Ynqader?) " ans
  if [ "$ans" == Y ] || [ "$ans" == y ]; then
    # package_install.push_front(package)
    package_install=("$package" "${package_install[@]}")
  elif [ "$ans" == N ] || [ "$ans" == n ]; then
    # package_candidate.push_back(package)
    package_candidate+=("$package")
  elif [ "$ans" == Q ] || [ "$ans" == q ]; then
    # package_candidate.extend(package_install.drain())
    package_candidate+=("${package_install[@]}")
    package_install=()
    break
  elif [ "$ans" == A ] || [ "$ans" == a ]; then
    # package_install.push_front(package)
    package_install=("$package" "${package_install[@]}")
    # package_install.push_front(package_candidate.drain_until('-'))
    for pack in "${package_candidate[@]}"; do
      if [ "$pack" == '-' ]; then break; fi
      package_install=("$pack" "${package_install[@]}")
    done
    package_candidate=("${package_candidate[@]:$i}")
    break
  elif [ "$ans" == D ] || [ "$ans" == d ]; then
    break
  elif [ "$ans" == E ] || [ "$ans" == e ]; then
    read -p "packages to install: " -a package_additional
    # package_install.extend_front(package_additional.drain())
    package_install=("${package_additional[@]}" "${package_install[@]}")
    package_additional=()
    # package_candidate.push_front(pakcage)
    package_candidate=("$package" "${package_candidate[@]}")
  elif [ "$ans" == R ] || [ "$ans" == r ]; then
    # package_candidate.push_front(package)
    package_candidate=("$package" "${package_candidate[@]}")
    # if package_install.len() > 0
    if [ ${#package_install[@]} -gt 0 ]; then
      # package_candidate.push_front(package_install.pop_front())
      package_candidate=("${package_install[0]}" "${package_candidate[@]}")
      package_install=("${package_install[@]:1}")
    fi
  else
    echo "y - install selected package"
    echo "n - do not install selected package"
    echo "q - quit; do not install anything"
    echo "a - install this and any later packages till -"
    echo "d - do not install this or any of the remaining packages"
    echo "e - manually add package name"
    echo "r - revert last acepttance"
    echo "? - print help"
  fi
done


# ==============================================================
# ================== installation configure ====================
# ==============================================================

# package-system specific install methods, highest precedence
# ===========================================================

# package specific install methods, mid precedence
# ====================================================

# TODO enable conditional silencing ?

install_package_vim-plug() {
  curl -sfLo ~/.vim/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

install_package_rustup() {
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -q
}

install_package_stack() {
  wget -qOl https://get.haskellstack.org/ | sh -s -- -q -f # quietly overwrite binary
  if [ $? -ne 0 ]; then
    echo stack install using wget failed. trying using curl...
    curl -sSL https://get.haskellstack.org/ | sh -s -- -q -f # quietly overwrite binary
  fi
}

install_package_tldr() {
  curl -s -o ~/bin/tldr https://raw.githubusercontent.com/raylee/tldr/master/tldr && \
  chmod +x ~/bin/tldr
}

install_package_ascii() {
  curl -s -O http://www.catb.org/~esr/ascii/ascii-3.18.tar.gz && \
  tar xzf ascii-3.18.tar.gz && \
  cd ascii-3.18 && \
  make -s && \
  mv ascii ../bin && \
  cd .. && \
  rm -rf ascii-3.18 ascii-3.18.tar.gz
}

# system specific install methods, lowest precedence
# ==================================================

install_debian_upgrade() {
  apt-get upgrade -y
}

install_system() {
  if [ -z "$1" ]; then
    # initialize if called without an argument
    echo :: SETUP: Initializing... ==
    case "$system" in
      debian)
        apt-get -qq update
        ;;
      *) # does nothing by default
    esac
    echo :: SETUP: Done! ==========
    return
  fi

  case "$system" in
    debian)
      apt-get -qq install -y $1
      ;;
    alpine)
      apk add $1
      ;;
    *) "no default install method specified for system $system"; false
  esac
}

# ==============================================================
# ===================== effective code =========================
# ==============================================================

install() {
  # https://stackoverflow.com/a/9529981
  if declare -F install_${system}_$1 > /dev/null; then
    install_${system}_$1
  elif declare -F install_package_$1 > /dev/null; then
    install_package_$1
  else
    install_system "$1"
  fi
}

run() {
  package_failed=()
  package_success=()

  if [ ${#package_install[@]} -eq 0 ]; then
    echo nothing to install
    exit
  fi

  install_system # initialize package manager

  # FIXME forces bash
  for (( i = ${#package_install[@]}-1 ; 0 <= i ; i-- )) ; do
    pack="${package_install[$i]}"
    echo :: SETUP: try installing $pack =======
    install "$pack"
    if [ $? -eq 0 ]; then
      package_success+=("$pack")
      echo :: SETUP: $pack installed ==========
    else
      package_failed+=("$pack")
      echo :: SETUP: $pack failed install =====
    fi
  done

  echo successfully installed packages ${package_success[@]}
  if [ ${#package_failed[@]} -ne 0 ]; then
    echo failed to install packages ${package_failed[@]}
    echo see .setup_log for details
  fi
}

# it's already in ~/bin by default
# so.. this does nothing in most cases
mkdir -p ~/bin

rm -f .setup_log

run 2>&1 | tee -a .setup_log
