#!/usr/bin/env python
# coding: utf-8

# In[ ]:


#!/usr/bin/env python

# TODO parameterize `-i ~/.ssh/shepherd_id_rsa`, `shepherd[2-7]`

import subprocess, os, io, sys
import pandas as pd

my_env = os.environ.copy()
# https://askubuntu.com/a/1075271

if 'GPUTOP_RSA_ID' in my_env:
  rsa_id = my_env['GPUTOP_RSA_ID']
else: rsa_id = "~/.ssh/id_rsa"
my_env['PDSH_SSH_ARGS_APPEND'] = f"-i {rsa_id} -o VisualHostKey=no"

sys.argv.append("")
server = sys.argv[1] or "localhost"


# In[ ]:


def get_gpu_info_remote(server):
  # see `nvidia-smi --help-query-gpu` for available fields
  process = subprocess.Popen(
      f"pdsh -w {server} -R ssh nvidia-smi --format=csv,noheader --query-gpu=index,gpu_uuid,power.draw,utilization.gpu,utilization.memory,temperature.gpu,pstate,memory.total,memory.used".split(),
      stdout=subprocess.PIPE, env=my_env)
  output, error = process.communicate()
  # nvidia-smi adds space after comma, so we have to strip it. but only python parser engine supports `delimiter=', '`.
  gpu_info = pd.read_csv(io.BytesIO(output), delimiter=', ', engine='python',
                         names=['gpu_i', 'uuid', 'power', 'util', 'mem_rw', 'temp', 'effi', 'mem_total', 'mem_used'])
  gpu_info = gpu_info.astype({'uuid':'str'})
  gpu_info[['host','gpu_i']] = gpu_info['gpu_i'].str.split(': ',1,expand=True)
  #gpu_info.sort_values(by='id', inplace=True)
  return gpu_info


# In[ ]:


def get_gpu_info_local():
  process = subprocess.Popen(
      f"nvidia-smi --format=csv,noheader --query-gpu=index,gpu_uuid,power.draw,utilization.gpu,utilization.memory,temperature.gpu,pstate,memory.total,memory.used".split(),
      stdout=subprocess.PIPE, env=my_env)
  output, error = process.communicate()
  gpu_info = pd.read_csv(io.BytesIO(output), delimiter=', ', engine='python',
                         names=['gpu_i', 'uuid', 'power', 'util', 'mem_rw', 'temp', 'effi', 'mem_total', 'mem_used'])
  gpu_info = gpu_info.astype({'uuid':'str'})
  gpu_info['host'] = 'localhost'
  return gpu_info


# In[ ]:


def get_prc_info_remote(server):
  # see `nvidia-smi --help-query-compute-apps` for available fields
  process = subprocess.Popen(
      f"pdsh -w {server} -R ssh nvidia-smi --format=csv,noheader --query-compute-apps=pid,used_memory,name,gpu_uuid".split(),
      stdout=subprocess.PIPE, env=my_env)
  output, error = process.communicate()
  # nvidia-smi adds space after comma, so we have to strip it. but only python parser engine supports `delimiter=', '`.
  prc_info = pd.read_csv(io.BytesIO(output), delimiter=', ', engine='python', names=['pid', 'mem', 'name', 'uuid'])
  prc_info[['host','pid']] = prc_info['pid'].str.split(':',1,expand=True)
  prc_info = prc_info.astype({'uuid':'str', 'pid':'int'})
  #prc_info.sort_values(by='id', inplace=True)
  return prc_info


# In[ ]:


def get_prc_info_local():
  process = subprocess.Popen(
      f"nvidia-smi --format=csv,noheader --query-compute-apps=pid,used_memory,name,gpu_uuid".split(),
      stdout=subprocess.PIPE, env=my_env)
  output, error = process.communicate()
  prc_info = pd.read_csv(io.BytesIO(output), delimiter=', ', engine='python', names=['pid', 'mem', 'name', 'uuid'])
  prc_info = prc_info.astype({'uuid':'str', 'pid':'int'})
  prc_info['host'] = 'localhost'
  return prc_info


# In[ ]:


def get_ps_info_remote(server):
  # https://www.baeldung.com/linux/measure-separate-cpu-usage-for-process#Linux%20ps
  # Note that `pcpu` or `%cpu` represents cpu utilization averaged thoughout whole process lifetime
  # it shows different value from `CPU%` of `htop`
  process = subprocess.Popen(
      #'pdsh -w shepherd[2-7] -R ssh ps --no-headers -o " %U %p %C %x %c #%a#" -p `nvidia-smi --format=csv,noheader --query-compute-apps=pid`'.split(),
      # each fields of result of `ps` is width-adjusted to form regular table. i.e. extra spaces persist if parsed as CSV.
      # moreover, processes executed with ',' in their arguments (e.g. `cut -f1,2,3 -d' '`) could be parsed as seperate fields,
      # which breaks read_csv function. I decided to use exploit quoting behavior, and use '#' as quote character, since '#' cannot
      # possibly appear in `args` (they get commented out!).
      # it is noted that `delim_whitespace=True` has same effect as `sep='\s+'` but is not true. `sep='\s+'` requires python engine
      # which does not handle quoted fields properly when len(sep) > 1. since `delim_whitespace=True` can be used with c engine,
      # quoting issue is gone.
      f'pdsh -w {server} -R ssh ps ww --no-headers -o " %U %p %C %x %c #%a" -p 1 `nvidia-smi --format=csv,noheader --query-compute-apps=pid` | sed "s/$/#/"'.split(),
      # adding initial-proc (pid=1) in the result to prevent `ps` errors when nvidia gives no pids
      # these dummy entries will be dropped when joining with gpu_info.
      # training quote should be attached afterwards since if `%a` is not the last format specifier, ps would truncate the field.
      # also note that `ww` option notifies column width to be unlimited preventing possible truncation.
      stdout=subprocess.PIPE, env=my_env)
  output, error = process.communicate()
  ps_info = pd.read_csv(io.BytesIO(output), delim_whitespace=True, quotechar='#',
                        names=['host', 'user', 'pid', 'cpu', 'time', 'cmd', 'args'])
  ps_info['host'] = ps_info['host'].str[:-1] # remove trailing colon
  ps_info['args'] = ps_info['args'].str.strip() # quotation of args conserved trailing whitespaces
  return ps_info


# In[ ]:


def get_ps_info_local():
  process = subprocess.Popen(
      ['bash', '-c', 'ps ww --no-headers -o " %U %p %C %x %c #%a" -p 1 `nvidia-smi --format=csv,noheader --query-compute-apps=pid` | sed "s/$/#/"'],
      stdout=subprocess.PIPE, env=my_env)
  output, error = process.communicate()
  ps_info = pd.read_csv(io.BytesIO(output), delim_whitespace=True, quotechar='#',
                        names=['user', 'pid', 'cpu', 'time', 'cmd', 'args'])
  ps_info['args'] = ps_info['args'].str.strip() # quotation of args conserved trailing whitespaces
  ps_info['host'] = 'localhost'
  return ps_info


# In[ ]:


if server == 'localhost':
  gpu_info = get_gpu_info_local()
  prc_info = get_prc_info_local()
  ps_info = get_ps_info_local()
else:
  gpu_info = get_gpu_info_remote(server)
  prc_info = get_prc_info_remote(server)
  ps_info = get_ps_info_remote(server)


# In[ ]:


# using right join to ensure gpu's with no running process still remains
prc_gpu = pd.merge(prc_info, gpu_info, how='right', left_on=['host','uuid'], right_on=['host','uuid'], suffixes=('_prc','_gpu'))
prc_gpu['pid'] = prc_gpu['pid'].fillna(0).astype(int)
prc_gpu_ps = pd.merge(prc_gpu, ps_info, how='left', left_on=['host','pid'], right_on=['host','pid'])


# In[ ]:


tbl = prc_gpu_ps[['host', 'gpu_i', 'effi', 'temp', 'power', 'util', 'mem_total', 'mem_used', 'mem_rw', 'pid', 'mem', 'user', 'time', 'args']].sort_values(by=['host','gpu_i','pid'])
tbl


# In[ ]:


#   row    skip_gpu skip_prc
# 'header'    _        _      | header
# Series    True     True     | horizontal bar
# Series    False    True     | place holder for idle gpu (no process running)
# Series    False    False    | for first row of a gpu cluster
# Series    True     False    | for following rows of a gpu cluster
def format_row(row, skip_gpu=False, skip_prc=False):
    isHeader = isinstance(row, str) and row == 'header'
    if isHeader: # if header, we can't skip field names at all
        skip_gpu, skip_prc = False, False

    if skip_gpu and skip_prc:
        # if both True, this is horizontal line
        # we first populate fields with 'header' values
        # to calculate total width
        isHeader = True

    ## value formatting

    fields = [] # (width, color_code_idx, str)

    color_code = [3, 2, 6, 4, 5, 1, 9] # (good) yellow -> red (bad), default-white (dead),
    colored = lambda c, s: s if c == 6 else f"\x1b[3{color_code[c]}m{s}\x1b[0m" # FIXME do nothing when c == 6??

    # host & gpu_id
    if not isHeader:
        fields.append((11, 6, f"{row['host']}-{row['gpu_i']}"))
    else: fields.append((11, 6, 'gpu cluster'))


    # pstate: ranges from P0 (maximum performance) to P12 (minimum performance)
    if not isHeader:
        pstate = int(row['effi'][1:])
        fields.append((3, pstate//2, row['effi']))
    else: fields.append((3, 6, 'pst'))

    # temp: in celsius
    if not isHeader:
        from bisect import bisect_left
        temp_range = [40, 60, 65, 70, 85, 105]
        temp = int(row['temp'])
        fields.append((6, bisect_left(temp_range, temp), f"{temp} Â°C"))
    else: fields.append((6, 6, 'temp'))

    # power: in watts
    if not isHeader:
        watt = round(float(row['power'][:-2]))
        fields.append((5, 6, f"{watt} W"))
    else: fields.append((5, 6, 'pow'))

    # util: utilization of gpu cluster processor
    if not isHeader:
        util_range = [0, 20, 40, 60, 80, 90]
        util = int(row['util'][:-2])
        fields.append((5, 6-bisect_left(util_range, util), f"{util} %"))
    else: fields.append((5, 6, 'gpu%'))

    # gpmem: utilization of total memory space
    if not isHeader:
        mem_util_range = [0, 20, 40, 60, 80, 90]
        mem_util = (100 * int(row['mem_used'][:-4])) // int(row['mem_total'][:-4])
        c = (bisect_left(mem_util_range, mem_util) + 6) % 7 # 0123456 -> 6012345
        fields.append((5, c, f"{mem_util} %"))
    else: fields.append((5, 6, 'mem%'))

#     # mem_rw: utilization of gpu cluster memory r/w bandwidth
#     if not isHeader:
#         mem_range = [0, 20, 40, 60, 80, 90]
#         mem = int(row['mem_rw'][:-2])
#         fields.append((5, 6-bisect_left(mem_range, util), f"{mem} %"))
#     else: fields.append((5, 6, 'memrw'))

    # pid
    fields.append((5, 6, str(row['pid']) if not isHeader else 'pid'))

    # mem_prc
    fields.append((8, 6, str(row['mem']) if not isHeader else 'gpu mem'))

    # user
    fields.append((8, 6, str(row['user']) if not isHeader else 'user'))

    # time
    fields.append((12, 6, str(row['time']) if not isHeader else 'start time'))

    # args
    if not isHeader:
        command = str(row['args'])
        if 'python -m ipykernel_launcher' in command and 'jupyter' in command:
            command = "<ipython-jupyeter>"
        elif 'python' in command and '.snakemake' in command:
            command = "<snakemake> " + command.split('/')[-1]
        fields.append((-50, 6, command))
    else: fields.append((-50, 6, 'command'))

    ## format join

    sep = '  '
    len_sep = 2

    def justify(w, s):
        w, left = (-w,True) if w < 0 else (w,False)
        if w < len(s): return s[:w-2] + '..'
        else: return s.ljust(w) if left else s.rjust(w)

    # squashing fields. note that skip_prc should be squashed first to keep the order.
    if skip_prc: fields[6:] = [(len_sep*len(fields[6:-1])+sum(abs(w) for w,_,_ in fields[6:]), 6, '')]
    if skip_gpu: fields[0:6] = [(len_sep*5+sum(abs(w) for w,_,_ in fields[0:6]), 6, '')]

    if skip_gpu and skip_prc: return 'â¯' * (len_sep+sum(w for w,_,_ in fields)) # U+23AF

    line = sep.join(colored(c, justify(w,s)) for w,c,s in fields)

    return line if not isHeader else "\x1b[7m" + line + "|\x1b[27m"
    # without trailijng '|' in header, trailing spaces are not shown (in white)

# print(format_row('header'))
# print(format_row(tbl.loc[0], skip_gpu=False, skip_prc=False))
# print(format_row(tbl.loc[0], skip_gpu=False, skip_prc=True ))
# print(format_row(tbl.loc[0], skip_gpu=True,  skip_prc=False))
# print(format_row(tbl.loc[0], skip_gpu=True,  skip_prc=True ))


# In[ ]:


last_gpu = None # None only when initial
print(format_row('header'))
for i,row in tbl.iterrows():
    gpu = tuple(row[:2])
    if gpu != last_gpu:
        if last_gpu: print(format_row((), skip_gpu=True, skip_prc=True)) # draw horizontal bar
        print(format_row(row, skip_gpu=False, skip_prc=row['pid']==0))
        last_gpu = gpu
    else:
        print(format_row(row, skip_gpu=True))

