#!/usr/bin/env python
# coding: utf-8

# In[1]:


#!/usr/bin/env python

import subprocess, os, io
import pandas as pd

my_env = os.environ.copy()
# https://askubuntu.com/a/1075271
my_env['PDSH_SSH_ARGS_APPEND'] = '-i ~/.ssh/shepherd_id_rsa -o VisualHostKey=no'


# In[2]:


# # see `nvidia-smi --help-query-gpu` for available fields
process = subprocess.Popen(
   "pdsh -w shepherd[2-7] -R ssh nvidia-smi --format=csv,noheader --query-gpu=index,gpu_uuid,power.draw,utilization.gpu,utilization.memory,temperature.gpu,pstate".split(),
   stdout=subprocess.PIPE, env=my_env)
output, error = process.communicate()
# nvidia-smi adds space after comma, so we have to strip it. but only python parser engine supports `delimiter=', '`.
gpu_info = pd.read_csv(io.BytesIO(output), delimiter=', ', engine='python', names=['gpu_i', 'uuid', 'power', 'util', 'mem', 'temp', 'effi'])
gpu_info = gpu_info.astype({'uuid':'string'})
gpu_info[['host','gpu_i']] = gpu_info['gpu_i'].str.split(': ',1,expand=True)
#gpu_info.sort_values(by='id', inplace=True)
gpu_info


# In[3]:


# see `nvidia-smi --help-query-compute-apps` for available fields
process = subprocess.Popen(
   "pdsh -w shepherd[2-7] -R ssh nvidia-smi --format=csv,noheader --query-compute-apps=pid,used_memory,name,gpu_uuid".split(),
   stdout=subprocess.PIPE, env=my_env)
output, error = process.communicate()
# nvidia-smi adds space after comma, so we have to strip it. but only python parser engine supports `delimiter=', '`.
prc_info = pd.read_csv(io.BytesIO(output), delimiter=', ', engine='python', names=['pid', 'mem', 'name', 'uuid'])
prc_info[['host','pid']] = prc_info['pid'].str.split(':',1,expand=True)
prc_info = prc_info.astype({'uuid':'string', 'pid':'int'})

#prc_info.sort_values(by='id', inplace=True)
prc_info


# In[4]:


process = subprocess.Popen(
   'pdsh -w shepherd[2-7] -R ssh ps --no-headers -o ",%U,%p,%C,%x,%c,%a" -p `nvidia-smi --format=csv,noheader --query-compute-apps=pid`'.split(),
   stdout=subprocess.PIPE, env=my_env)
output, error = process.communicate()
ps_info = pd.read_csv(io.BytesIO(output), names=['host', 'user', 'pid', 'cpu', 'time', 'cmd', 'args'])
ps_info['host'] = ps_info['host'].str[:-2]
prc_info = prc_info.astype({'pid':'int'})
ps_info


# In[5]:


prc_gpu = pd.merge(prc_info, gpu_info, how='left', left_on=['host','uuid'], right_on=['host','uuid'], suffixes=('_prc','_gpu'))
prc_gpu_ps = pd.merge(prc_gpu, ps_info, how='left', left_on=['host','pid'], right_on=['host','pid'])


# In[33]:


tbl = prc_gpu_ps[['host', 'gpu_i', 'effi', 'temp', 'power', 'util', 'mem_gpu', 'pid', 'mem_prc', 'user', 'time', 'args']].sort_values(by=['host','gpu_i'])
tbl


# In[53]:


def format_row(row, skip=False):
    if isinstance(row, str) and row == 'header': # FIXME header string is hardcoded since fields width not known unless row is provided...
        return "\x1b[7mgpu cluster  pst    temp   pow    gpu  gpmem    pid   cpu mem      user    start time  command                                            \x1b[27m", 138

    fields = [] # (width, color_code_idx, str)

    color_code = [3, 2, 6, 4, 5, 1, 9] # (good) yellow -> red (bad), default-white (dead),
    colored = lambda c, s: f"\x1b[3{color_code[c]}m{s}\x1b[0m"
    # host & gpu_id
    fields.append((11, 6, f"{row['host']}-{row['gpu_i']}"))

    # pstate: ranges from P0 (maximum performance) to P12 (minimum performance)
    pstate = int(row['effi'][1:])
    fields.append((3, pstate//2, row['effi']))

    # temp: in celsius
    from bisect import bisect_left
    temp_range = [40, 60, 65, 70, 85, 105]
    temp = int(row['temp'])
    fields.append((6, bisect_left(temp_range, temp), f"{temp} °C"))

    # power: in watts
    watt = round(float(row['power'][:-2]))
    fields.append((4, 6, f"{watt} W"))

    # util: utilization of gpu cluster processor
    util_range = [0, 20, 40, 60, 80, 90]
    util = int(row['util'][:-2])
    fields.append((5, 6-bisect_left(util_range, util), f"{util} %"))

    # mem_gpu: utilization of gpu cluster memory
    mem_range = [0, 20, 40, 60, 80, 90]
    mem = int(row['mem_gpu'][:-2])
    fields.append((5, 6-bisect_left(mem_range, util), f"{mem} %"))

    # pid
    fields.append((5, 6, str(row['pid'])))

    # mem_prc
    fields.append((8, 6, str(row['mem_prc'])))

    # user
    fields.append((8, 6, str(row['user'])))

    # time
    fields.append((12, 6, str(row['time']))) # ???

    # args
    fields.append((50, 6, str(row['args']))) # ???
    
    sep = '  '
    len_sep = 2

    if skip:
        fields[0:6] = [(len_sep*5+sum(w for w,_,_ in fields[0:6]), 6, '')]

    total_width = len_sep*(len(fields)-1) + sum(w for w,_,_ in fields)
    line = sep.join(colored(c, s.rjust(w) if len(s)<=w else s[:w-1]+'..') for w,c,s in fields)
    return line, total_width

# print(format_row('header')[0])
# print(format_row(tbl.loc[0], skip=False)[0])
# print(format_row(tbl.loc[0], skip=True)[0])


# In[63]:


rowlen = 0
last_gpu = (None, None)
print(format_row('header')[0])
for i,row in tbl.iterrows():
    gpu = tuple(row[:2])
    if gpu != last_gpu:
        if rowlen != 0: print('⎯'*rowlen) # U+23AF
        last_gpu = gpu
        s, rowlen = format_row(row, skip=False)
    else:
        s, rowlen = format_row(row, skip=True)
    print(s)


# In[ ]:



















































